// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Xor.hdl

/**
 *  Exclusive-or gate: out = !(a == b).
 */

CHIP Xor {

    IN a, b;
    OUT out;

    PARTS:
    // This is negative logic so...
    // Nand is false ONLY when both inputs are true.
    // So (a Nand not_b) is ONLY false if a is true
    // and not_b is true.  Which means b is false.
    // Doing this twice gets us two values that are false
    // ONLY if one of the inputs is true.
    // i.e. a1 is false ONLY if a is true and b is false.
    // This means that both a1 and b1 can not both be false.
    // The Nand truth table is:
    // a1 b1 out
    // 0  0  1
    // 0  1  1
    // 1  0  1
    // 1  1  0
    // As explained above a1 and b1 can not both be false
    // so the top row is unreachable.
    // Therefore (a1 Nand b1) gets us what we like!

    Not(in=a,             out=nota);
    Not(in=b,             out=notb);
    // a1 will be true only if b is true
    Nand(a=a,     b=notb, out=a1);
    // b1 will be true only if a is true
    Nand(a=nota,  b=b,    out=b1);
    Nand(a=a1,    b=b1,   out=out);
}
/*
    // A less efficent but perhapse clearer implementation?
    // We want:
    // a  b  r
    // 0  0  0
    // 0  1  1
    // 1  0  1
    // 0  0  0
    // And is true only if a and b are true
    // Therefore (a And not_b) will only be true
    // if a is true and b is false
    // doing this twice we have 2 values that
    // are only true if one of the inputs are true
    // The Or truth table is:
    // a1 b1 out
    // 0  0  0
    // 0  1  1
    // 1  0  1
    // 1  1  1
    // As explained above a1 and b1 will never both be true
    // so the bottom row is unreachable.
    // Therefor (a1 Or b1) gets us what we like!

    Not(in=a,            out=nota);
    Not(in=b,            out=notb);
    And(a=a,     b=notb, out=a1);
    And(a=nota,  b=b,    out=b1);
    Or (a=a1,    b=b1,   out=out);
*/
